# -*- coding: utf-8 -*-

#Импортируем нужную библиотеку
from PIL import Image
#Модль для регулярных вырежений
import re

#Коардинаты окна отрисоки
scr_x = 800
scr_y = 800

#Обьявляем константы для масштабирования при любом разрешении экрана
half_scr_x = int(scr_x / 2)
half_scr_y = int(scr_y / 2)
#Создание новой чёрной картинки
#+1 что бы точки не выходили за границу массива
img = Image.new('RGB', (scr_x+1,scr_y+1), "black")
#Создание карты пикселей
canvas_pixels = img.load()
#Цвет точек для отрисовки
color = (255,255,255)

#Чтение файла с моделью
f = open('face.obj','r')
#Перевод содержимого файла в строку
lines = f.read()

#Разбитие строки с помщью регулярного выражения
for line in lines.split('\n'):
    #print(line)
    #Разрезка строки по пробелам регулярное выражение
    try:
        # v - представляет ли собой строка набор коардинат
        v, x, y, z = re.split('\s+', line)
    except:
        continue
    # Если строка это набор коардинат
    if v == 'v':
        #Все коардинады представляют собой дапазон от -1 до 1
        #Что бы вписать их в канву переводим полочительный диапазон
        #Максимальная окардината картинки у нас 800 пикселей
        #а максимальная коардината обьекта из документа это 2
        #для маштабирования умножаем каждую коардинату на 400
        #и приводим их в целочисленное значение
        x = int((float(x)+1) * half_scr_x)
        '''
            scr_y что бы перевернуть картинку
            так как коардинаты по у в документе идут снизу вверх
            у1  у2
            0 - 800
            1 - 799
            2 - 798
            вывод от у2 - у1 = нужная коардината
        '''
        y = scr_y - int((float(y)+1) * half_scr_y)
        
        #Передаём эти пиксели конве
        canvas_pixels[x,y] = color
        
#Выводим изображение на экран
img.show()
